<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>热更新 on 桂圆的第二人生 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://guixiaoyuan.github.io/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/</link>
    <language>en-us</language>
    <author>Xiaoyuan Gui</author>
    <copyright>Copyright (c) 2017, Xiaoyuan Gui; all rights reserved.</copyright>
    <updated>Sat, 26 Aug 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Android热更新</title>
      <link>https://guixiaoyuan.github.io/post/2017-08-26/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 UTC</pubDate>
      <author>Xiaoyuan Gui</author>
      <guid>https://guixiaoyuan.github.io/post/2017-08-26/</guid>
      <description>

&lt;p&gt;项目场景：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;紧急发现了一个bug，影响用户体验，阻断项目流程。这个时候，只能紧急发布一个强制更新的新版本，让用户升级。&lt;/li&gt;
&lt;li&gt;最近百团大战开始。需要增加一个活动弹窗入口，越快越好。这个时候，只能紧急发布一个强制更新的新版本，让用户升级。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;存在需求：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;可不可以不让用户重新安装就可以解决上述场景？
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;什么是热更新&#34;&gt;什么是热更新：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;让应用能够在无需重新安装的情况实现更新，帮助应用快速建立动态修复能力。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面的定义来看，热补丁节省Android大量应用市场发布的时间。同时用户也无需重新安装，只要上线就能无感知的更新。&lt;/p&gt;

&lt;h3 id=&#34;热更新的原理&#34;&gt;热更新的原理：&lt;/h3&gt;

&lt;p&gt;现在市面上主流的几大热更新技术：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;淘宝 Dexposed&lt;/li&gt;
&lt;li&gt;支付宝 AndFix&lt;/li&gt;
&lt;li&gt;Qzone 超级热补丁&lt;/li&gt;
&lt;li&gt;微信 Tinker&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;dexposed&#34;&gt;Dexposed&lt;/h4&gt;

&lt;p&gt;基于 Xposed 实现的无侵入的运行时 AOP (Aspect-oriented Programming)  框架，可以实现在线修复 Bug，修复粒度方法级别，这也就意味着我们没有办法进行类的增减操作。而且由于对 ART 虚拟机不支持，导致其对 Android 5.0、6.0 均不支持，使用局限性太大。&lt;/p&gt;

&lt;h3 id=&#34;andfix&#34;&gt;AndFix&lt;/h3&gt;

&lt;p&gt;native hook 方式，其核心部分在 JNI 层对方法进行替换，替换有问题的方法,修复粒度方法级别，无法在类中新增和删减字段，可以做到即时生效。也就是运行时生效。但是因为它的核心部分在JNI，所以会出现很多适配兼容的问题。因为国内的rom厂商多才多艺.&lt;/p&gt;

&lt;h3 id=&#34;超级热补丁&#34;&gt;超级热补丁&lt;/h3&gt;

&lt;p&gt;使用新的 ClassLoader 加载 patch.dex，hack 默认的 ClassLoader，替换有问题的类，修复粒度类级别，一般无法做到即时生效，需要在应用下一次启动时生效。但是在art虚拟机中，如果改变了类变量，和方法名，有可能导致内存错乱的问题，没有开源这个项目。但在github上的Nuwa采用了相同的方式，这个是开源。&lt;/p&gt;

&lt;h3 id=&#34;tinker&#34;&gt;Tinker&lt;/h3&gt;

&lt;p&gt;dex 文件全量替换，基于 DexDiff 技术，对比修复前后的 dex 文件，生成 patch.dex，再根据 patch.dex 更新有问题的 dex 文件。简单来说，在编译时通过新旧两个Dex生成差异patch.dex。在运行时，将差异patch.dex重新跟原始安装包的旧Dex还原为新的Dex。这个过程可能比较耗费时间与内存，所以我们是单独放在一个后台进程:patch中。为了补丁包尽量的小，微信自研了DexDiff算法，它深度利用Dex的格式来减少差异的大小。&lt;/p&gt;

&lt;h3 id=&#34;热更新方案的比较&#34;&gt;热更新方案的比较：&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Tinker&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Qzone&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Andfix&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dexposed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;类替换&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;lib替换&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;资源替换&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;全平台支持&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;即时生效&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;性能损耗&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较小&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;较大&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较小&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;较小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;补丁包大小&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较小&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;较大&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;一般&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;一般&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;开发透明&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;复杂度&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较低&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;较低&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;复杂&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;复杂&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;gradle支持&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;no&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;接口文档&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;丰富&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;一般&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;一般&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;较少&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;占rom体积&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较大&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;较小&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较小&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;较小&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;成功率&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;较好&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;最高&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;一般&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;一般&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;热更新的使用场景&#34;&gt;热更新的使用场景：&lt;/h3&gt;

&lt;p&gt;热补丁技术也可以理解为一个动态修改代码与资源的通道，它适合于修改量较少的情况。&lt;/p&gt;

&lt;p&gt;我们看一下微信的版本升级的情况：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;普通升级&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;布丁升级&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据大小&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;33M&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145K&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;更新速度&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10天&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1天（70%）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;自动升级&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wifi&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;移动网络&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以Android用户的升级习惯，即使是相对活跃的微信也需要10天以上的时间去覆盖50%的用户。使用补丁技术，我们能做到1天覆盖70%以上。这也是基于补丁体积较小，可以直接使用移动网络下载更新。&lt;/p&gt;

&lt;h3 id=&#34;热更新使用限制&#34;&gt;热更新使用限制&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;补丁只能针对单一客户端版本，随着版本差异变大补丁体积也会增大；&lt;/li&gt;
&lt;li&gt;补丁不能支持所有的修改，例如AndroidManifest；&lt;/li&gt;
&lt;li&gt;补丁无论对代码还是资源的更新成功率都无法达到100%。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;如何在一个项目中增加热更新功能&#34;&gt;如何在一个项目中增加热更新功能？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在工程目录 build.gradle 文件中添加插件依赖。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // tinkersupport插件，其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.0.8
        classpath &amp;quot;com.tencent.bugly:tinker-support:latest.release&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在app module 下的build.gradle 文件中添加 配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
      compile &amp;quot;com.android.support:multidex:1.0.1&amp;quot; 
      compile &#39;com.tencent.bugly:crashreport_upgrade:latest.release&#39;
}
// 依赖插件脚本
apply from: &#39;tinker-support.gradle&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在同级目录下创建 tinker-support.gradle&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.tencent.bugly.tinker-support&#39;

def bakPath = file(&amp;quot;${buildDir}/bakApk/&amp;quot;)

/**
 * 此处填写每次构建生成的基准包目录
 */
def baseApkDir = &amp;quot;app-0912-17-04-44&amp;quot;
/**
 * 对于插件各参数的详细解析请参考
 */
tinkerSupport {

    // 开启tinker-support插件，默认值true
    enable = true

    //自动生成tinkerId，无须关注此。默认为false
    //autoGenerateTinkerId = true

    tinkerEnable = true

    // 指定归档目录，默认值当前module的子目录tinker
    autoBackupApkDir = &amp;quot;${bakPath}&amp;quot;

    // 是否启用覆盖tinkerPatch配置功能，默认值false
    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
    overrideTinkerPatchConfiguration = true

    // 编译补丁包时，必需指定基线版本的apk，默认值为空
    // 如果为空，则表示不是进行补丁包的编译
    // @{link tinkerPatch.oldApk }
    baseApk = &amp;quot;${bakPath}/${baseApkDir}/com.nongfenqi.sherlock-release-v2.3.2_32.apk&amp;quot;
    // 对应tinker插件applyMapping
    baseApkProguardMapping = &amp;quot;${bakPath}/${baseApkDir}/app-release-mapping.txt&amp;quot;

    // 对应tinker插件applyResourceMapping
    baseApkResourceMapping = &amp;quot;${bakPath}/${baseApkDir}/app-release-R.txt&amp;quot;

    // 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性
    tinkerId = &amp;quot;2.3.2-0912-patch&amp;quot;

    // 构建多渠道补丁时使用
    // buildAllFlavorsDir = &amp;quot;${bakPath}/${baseApkDir}&amp;quot;

    // 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）
    // isProtectedApp = true

    // 是否开启反射Application模式
    enableProxyApplication = false

}

/**
 * 一般来说,我们无需对下面的参数做任何的修改
 * 对于各参数的详细介绍请参考:
 * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
 */
tinkerPatch {
    //oldApk =&amp;quot;${bakPath}/${appName}/app-release.apk&amp;quot;
    tinkerEnable = true
    ignoreWarning = false
    useSign = true
    dex {
        dexMode = &amp;quot;jar&amp;quot;
        pattern = [&amp;quot;classes*.dex&amp;quot;]
        loader = []
    }
    lib {
        pattern = [&amp;quot;lib/*/*.so&amp;quot;]
    }

    res {
        pattern = [&amp;quot;res/*&amp;quot;, &amp;quot;r/*&amp;quot;, &amp;quot;assets/*&amp;quot;, &amp;quot;resources.arsc&amp;quot;, &amp;quot;AndroidManifest.xml&amp;quot;]
        ignoreChange = []
        largeModSize = 100
    }

    packageConfig {
    }
    sevenZip {
        zipArtifact = &amp;quot;com.tencent.mm:SevenZip:1.1.10&amp;quot;
//        path = &amp;quot;/usr/local/bin/7za&amp;quot;
    }
    buildConfig {
        keepDexApply = false
        //tinkerId = &amp;quot;1.0.1-base&amp;quot;
        //applyMapping = &amp;quot;${bakPath}/${appName}/app-release-mapping.txt&amp;quot; //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式
        //applyResourceMapping = &amp;quot;${bakPath}/${appName}/app-release-R.txt&amp;quot; // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;权限配置以及activity配置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_PHONE_STATE&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.ACCESS_NETWORK_STATE&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.ACCESS_WIFI_STATE&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_LOGS&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_EXTERNAL_STORAGE&amp;quot;/&amp;gt;


&amp;lt;activity
    android:name=&amp;quot;com.tencent.bugly.beta.ui.BetaActivity&amp;quot;
    android:theme=&amp;quot;@android:style/Theme.Translucent&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;混淆配置&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;        -dontwarn com.tencent.bugly.**
        -keep public class com.tencent.bugly.**{*;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>
