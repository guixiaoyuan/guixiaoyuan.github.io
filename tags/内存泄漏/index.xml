<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>内存泄漏 on 桂圆的第二人生 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://guixiaoyuan.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link>
    <language>en-us</language>
    <author>Xiaoyuan Gui</author>
    <copyright>Copyright (c) 2017, Xiaoyuan Gui; all rights reserved.</copyright>
    <updated>Tue, 23 Oct 2018 00:00:00 UTC</updated>
    
    <item>
      <title>关于Andorid内存泄漏</title>
      <link>https://guixiaoyuan.github.io/post/2018-10-23/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 UTC</pubDate>
      <author>Xiaoyuan Gui</author>
      <guid>https://guixiaoyuan.github.io/post/2018-10-23/</guid>
      <description>&lt;p&gt;OOM问题会经常困扰我们，尤其是维护一个用户数量基数大的app的时候，我们的bug统计数据前几位，基本上会被OOM问题给占据。通过结果反向分析问题，和在写代码的时候注意内存泄漏从而避免OOM，本质上都需要对内存泄漏的产生，以及几种常见的方式需要有着清晰的认识。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;内存泄漏的根本原因&#34;&gt;内存泄漏的根本原因：&lt;/h1&gt;

&lt;p&gt;长生命周期的对象 持有 短生命周期 的强/弱引用，导致本应该被回收的短生命周期的对象无法被正常回收。&lt;/p&gt;

&lt;h1 id=&#34;内存泄漏的情况&#34;&gt;内存泄漏的情况&lt;/h1&gt;

&lt;h2 id=&#34;单例模式&#34;&gt;单例模式&lt;/h2&gt;

&lt;p&gt;由于单例模式的静态特性，使得它的生命周期和我们的应用一样长，一不小心让单例无限制的持有 Activity 的强引用就会导致内存泄漏。&lt;/p&gt;

&lt;p&gt;解决办法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class BaseApplication extends Application{
    private static ApplicationContext sContext;
    @Override
    public void onCreate(){
        super.onCreate();
        //全局的context，不再使用activity的引用
        sContext = getApplicationContext();
    }
    public static Context getApplicationContext(){
        return sContext;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handler使用&#34;&gt;handler使用&lt;/h2&gt;

&lt;p&gt;由于 Handler 属于 TLS（Thread Local Storage）变量，导致它的生命周期和 Activity 不一致。因此通过 Handler 来更新 UI 一般很难保证跟 View 或者 Activity 的生命周期一致，故很容易导致无法正确释放。&lt;/p&gt;

&lt;p&gt;解决办法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;弱引用+ 静态内部类。首先第一个关键是，静态内部类是不会引用外部对象的，但是我们依然需要外部的activity 处理事务，所以我们持有activity的弱引用来处理消息。弱引用的好处是当gc运行的时候，也就是退出的时候，不管内存够不够，都会回收弱引用。&lt;/li&gt;
&lt;li&gt;activity结束的时候，移除message。为啥这个也可以防止内存泄漏？回到handler内存泄漏的本质，其实就是messagequeue 里面的message持有了handler的句柄，handler持有了外部的activity，所以message如果一直在，这个activity就没有办法回收，导致内存泄漏。移除了message，源头解决了内存泄漏。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    public class MyHandler extends android.os.Handler {

        private WeakReference&amp;lt;Activity&amp;gt; mContextWeakReference;

        public MyHandler(Activity activity) {
            mContextWeakReference = new WeakReference&amp;lt;&amp;gt;(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            Activity activity = mContextWeakReference.get();
            if (activity == null || activity.isDestroyed() || activity.isFinishing()) {
                removeCallbacksAndMessages(null);
            }
            //todo logic things
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;引生一下-远离非静态内部类和匿名类&#34;&gt;引生一下：（远离非静态内部类和匿名类）&lt;/h3&gt;

&lt;p&gt;非静态内部类为什么会容易引发内存泄漏？&lt;/p&gt;

&lt;p&gt;当我们反编译app的时候，会看到非静态内部类的格式为 外部类$非静态内部类&lt;/p&gt;

&lt;p&gt;也就说说非静态内部类会持有外部类的引用，称为隐式引用。这个非静态内部类如果没有在外部类回收的时候被回收，也就是会持有外部类的引用导致外部类无法被回收。也就是内存泄漏。&lt;/p&gt;

&lt;p&gt;非静态内部类中创建了一个静态实例，导致该实例的生命周期和应用ClassLoader级别，又因为该静态实例又会隐式持有其外部类的引用，所以导致其外部类无法正常释放，出现了泄漏问题。&lt;/p&gt;

&lt;h2 id=&#34;使用系统服务引发的内存泄漏&#34;&gt;使用系统服务引发的内存泄漏&lt;/h2&gt;

&lt;p&gt;遇到的内存泄漏问题是因为在 Activity 中调用了 getPackageManger 方法获取 PMS ，该方法调用的是 ContextImpl，此时如果ContextImpl 中 PackageManager 为 null，就会创建一个 PackageManger（ContextImpl 会将自己传递进去，而 ContextImpl 的 mOuterContext 为 Activity），创建 PackageManager 实际上会创建 PackageManagerService（简称 PMS），而 PMS 的构造方法中会创建一个 UserManger（UserManger 初始化之后会持有 ContextImpl 的强引用）。
只要 PMS 的 class 未被销毁，那么就会一直引用着 UserManger ，进而导致其关联到的资源无法正常释放。&lt;/p&gt;

&lt;p&gt;解决办法&lt;/p&gt;

&lt;p&gt;将getPackageManager()改为 getApplication()#getPackageManager() 。这样引用的就是 Application Context，而非 Activity 了。&lt;/p&gt;

&lt;h2 id=&#34;webview-引发的内存泄漏&#34;&gt;WebView 引发的内存泄漏&lt;/h2&gt;

&lt;h2 id=&#34;对象的注册与反注册没有成对出现&#34;&gt;对象的注册与反注册没有成对出现&lt;/h2&gt;

&lt;p&gt;譬如注册广播接收器、注册观察者（典型的譬如数据库的监听）等。&lt;/p&gt;

&lt;h2 id=&#34;创建与关闭没有成对出现造成的泄露&#34;&gt;创建与关闭没有成对出现造成的泄露&lt;/h2&gt;

&lt;p&gt;譬如Cursor资源必须手动关闭，WebView必须手动销毁，流等对象必须手动关闭等。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
