<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>混淆 on 桂圆的第二人生 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://guixiaoyuan.github.io/tags/%E6%B7%B7%E6%B7%86/</link>
    <language>en-us</language>
    <author>Xiaoyuan Gui</author>
    <copyright>Copyright (c) 2017, Xiaoyuan Gui; all rights reserved.</copyright>
    <updated>Sun, 08 Jul 2018 00:00:00 UTC</updated>
    
    <item>
      <title>关于Andorid混淆</title>
      <link>https://guixiaoyuan.github.io/post/2018-07-08/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 UTC</pubDate>
      <author>Xiaoyuan Gui</author>
      <guid>https://guixiaoyuan.github.io/post/2018-07-08/</guid>
      <description>&lt;p&gt;新公司的驾考类产品稳定运行了好几年，最近接手的时候发现居然没有进行混淆处理。这无异于在大马路上裸奔。反编译之后，分分钟拿到你的所有源码。&lt;/p&gt;

&lt;p&gt;马上将这一情况报告给leader，leader是搞ios出身的。同意了。原本以为一天就搞完了，后来的经历告诉我，还是太年轻了。&lt;/p&gt;

&lt;p&gt;接着我才理解这个项目的前辈们不搞混淆的原因，这是一条漫漫长坑。&lt;/p&gt;

&lt;p&gt;其实混淆本身不难，难的是一个项目历尽几手，尾大不掉。很多意外的坑。
&lt;/p&gt;

&lt;h1 id=&#34;关于andorid混淆&#34;&gt;关于Andorid混淆&lt;/h1&gt;

&lt;h2 id=&#34;混淆是什么&#34;&gt;混淆是什么？&lt;/h2&gt;

&lt;p&gt;Java是一种跨平台的、解释型语言，Java源代码编译成中间“字节码”存储于class文件中。由于跨平台的需要，Java字节码中包含了很多源代码信息，如变量名、方法名，并且通过这些名称来访问变量和方法，这些符号带有许多语义信息，很容易被反编译成Java源代码。为了防止这种现象，我们可以使用Java混淆器对Java字节码进行混淆。&lt;/p&gt;

&lt;p&gt;混淆就是对发布出去的程序进行重新组织和处理，使得处理后的代码与处理前代码完成相同的功能，而混淆后的代码很难被反编译，即使反编译成功也很难得出程序的真正语义。被混淆过的程序代码，仍然遵照原来的档案格式和指令集，执行结果也与混淆前一样，只是混淆器将代码中的所有变量、函数、类的名称变为简短的英文字母代号，在缺乏相应的函数名和程序注释的情况下，即使被反编译，也将难以阅读。同时混淆是不可逆的，在混淆的过程中一些不影响正常运行的信息将永久丢失，这些信息的丢失使程序变得更加难以理解。&lt;/p&gt;

&lt;p&gt;所以混淆的作用很明显&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;混淆器的作用不仅仅是保护代码，它也有精简编译后程序大小的作用。&lt;/li&gt;
&lt;li&gt;由于以上介绍的缩短变量和函数名以及丢失部分信息的原因，编译后jar文件体积大约能减少25%。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;怎么混淆&#34;&gt;怎么混淆？&lt;/h2&gt;

&lt;h3 id=&#34;开启混淆&#34;&gt;开启混淆&lt;/h3&gt;

&lt;p&gt;android studio 设置混淆非常简单。&lt;/p&gt;

&lt;p&gt;在build.gradle 文件中 设置如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  buildTypes {
        release {
            signingConfig signingConfigs.release
            // 是否进行混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就会从你的配置文件中去读你的混淆规则，配置文件 proguard-rules.pro&lt;/p&gt;

&lt;p&gt;发布一款应用除了设minifyEnabled为ture，你也应该设置zipAlignEnabled为true，像Google Play强制要求开发者上传的应用必须是经过zipAlign的，zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗。&lt;/p&gt;

&lt;h3 id=&#34;制定混淆规则&#34;&gt;制定混淆规则&lt;/h3&gt;

&lt;p&gt;一般android 的混淆规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jni方法不可混淆，因为这个方法需要和native方法保持一致；&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;-keepclasseswithmembernames class * { # 保持native方法不被混淆    
    native &amp;lt;methods&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;有用到 WebView 的 JS 调用也需要保证写的接口方法不混淆，原因和第一条一样&lt;/li&gt;
&lt;li&gt;使用了 Gson 之类的工具要使 JavaBean 类即实体类不被混淆（实体类都要keep住）&lt;/li&gt;
&lt;li&gt;使用了自定义控件那么要保证它们不参与混淆&lt;/li&gt;
&lt;li&gt;使用了枚举 enum 要保证枚举不被混淆&lt;/li&gt;
&lt;li&gt;对第三方库中的类不进行混淆&lt;/li&gt;
&lt;li&gt;运用了反射的类也不进行混淆&lt;/li&gt;
&lt;li&gt;在引用第三方库的时候，一般会标明库的混淆规则的，建议在使用的时候就把混淆规则添加上去，免得到最后才去找&lt;/li&gt;
&lt;li&gt;Parcelable 的子类和 Creator 静态成员变量不混淆，否则会产生 Android.os.BadParcelableException 异常&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文章末尾会给一个通用的模版。&lt;/p&gt;

&lt;h3 id=&#34;混淆语法&#34;&gt;混淆语法&lt;/h3&gt;

&lt;p&gt;确定混淆规则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-keep  保留类和类中的成员，防止它们被混淆或移除。

-keep xxx.xxx.*   一颗星表示不混淆该包下的类，而子包下的类还是会被混淆。
-keep xxx.xxx.**  两颗星表示都不被混淆。
-keep xxx.xxx.** { *; }  表示类内部的方法和变量都不被混淆
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;通用模版&#34;&gt;通用模版&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile
#-------------------------------------------基本不用动区域--------------------------------------------
#---------------------------------基本指令区----------------------------------
#代码混淆压缩比，范围为0-7，默认为5。一般不修改
-optimizationpasses 5
# 混合时不使用大小写混合，混合后的类名为小写
-dontusemixedcaseclassnames
# 指定不去忽略非公共库的类
-dontskipnonpubliclibraryclasses
# 指定不去忽略非公共库的类成员
-dontskipnonpubliclibraryclassmembers
# 不做预校验，preverify是proguard的四个步骤之一，Android不需要preverify，去掉这一步能够加快混淆速度。
-dontpreverify
# 这句话能够使我们的项目混淆后产生映射文件
# 包含有类名-&amp;gt;混淆后类名的映射关系
-verbose
-printmapping proguardMapping.txt
# 指定混淆是采用的算法，后面的参数是一个过滤器
# 这个过滤器是谷歌推荐的算法，一般不做更改
-optimizations !code/simplification/cast,!field/*,!class/merging/*
# 保留Annotation不混淆
-keepattributes *Annotation*,InnerClasses
# 避免混淆泛型
-keepattributes Signature
# 抛出异常时保留代码行号
-keepattributes SourceFile,LineNumberTable

#---------------------------------默认保留区---------------------------------

# 保留我们使用的四大组件，自定义的Application等等这些类不被混淆
# 因为这些子类都有可能被外部调用
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.app.backup.BackupAgentHelper
-keep public class * extends android.preference.Preference
-keep public class * extends android.view.View
-keep public class com.android.vending.licensing.ILicensingService

# 保留support下的所有类及其内部类
-keep class android.support.** {*;}

# 保留继承的
-keep public class * extends android.support.v4.**
-keep public class * extends android.support.v7.**
-keep public class * extends android.support.annotation.**

# 保留本地native方法不被混淆
-keepclasseswithmembernames class * {
    native &amp;lt;methods&amp;gt;;
}

# 保留在Activity中的方法参数是view的方法，
# 这样以来我们在layout中写的onClick就不会被影响
-keepclassmembers class * extends android.app.Activity{
    public void *(android.view.View);
}

# 保留枚举类不被混淆
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# 保留我们自定义控件（继承自View）不被混淆
-keep public class * extends android.view.View{
    *** get*();
    void set*(***);
    public &amp;lt;init&amp;gt;(android.content.Context);
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet);
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet, int);
}
-keepclasseswithmembers class * {
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet);
    public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet, int);
}

# 保留Parcelable序列化类不被混淆
-keep class * implements android.os.Parcelable {
  public static final android.os.Parcelable$Creator *;
}
# 保留Serializable序列化的类不被混淆
-keepnames class * implements java.io.Serializable
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
        private static final java.io.ObjectStreamField[] serialPersistentFields;
        !static !transient &amp;lt;fields&amp;gt;;
        !private &amp;lt;fields&amp;gt;;
        !private &amp;lt;methods&amp;gt;;
        private void writeObject(java.io.ObjectOutputStream);
        private void readObject(java.io.ObjectInputStream);
        java.lang.Object writeReplace();
        java.lang.Object readResolve();
}

# 保留R下面的资源
-keep class **.R$* {
 *;
}

# 对于带有回调函数的onXXEvent、**On*Listener的，不能被混淆
-keepclassmembers class * {
    void *(**On*Event);
    void *(**On*Listener);
}

#---------------------------------webview------------------------------------
-keepclassmembers class fqcn.of.javascript.interface.for.Webview {
   public *;
}
-keepclassmembers class * extends android.webkit.WebViewClient {
    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
    public boolean *(android.webkit.WebView, java.lang.String);
}
-keepclassmembers class * extends android.webkit.WebViewClient {
    public void *(android.webkit.WebView, jav.lang.String);
}

#--------------实体类---------------#

实体类优雅的混淆

* 在混淆配置文件中添加bean类包名，这样该包下所有的bean类都可以不被混淆了
* -keep public class yourBeanPackageName.**{*;} 
* 使用@keep注解（推荐）

#--------------三方包---------------#


&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;常见开源框架混淆&#34;&gt;常见开源框架混淆&lt;/h2&gt;

&lt;p&gt;三方包一般去官网都能找到，实在找不到，你可以使用下面的方法。&lt;/p&gt;

&lt;p&gt;比如融云：&lt;/p&gt;

&lt;p&gt;-dontwarn io.rong.push.**&lt;/p&gt;

&lt;p&gt;-keep class io.rong.push.** {*；}&lt;/p&gt;

&lt;p&gt;如果你不知道第三方的混淆配置，就这样写，没问题的&lt;/p&gt;

&lt;h3 id=&#34;retrofit&#34;&gt;retrofit&lt;/h3&gt;

&lt;p&gt;官网给的混淆配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Platform calls Class.forName on types which do not exist on Android to determine platform.
-dontnote retrofit2.Platform
# Platform used when running on RoboVM on iOS. Will not be used at runtime.
-dontnote retrofit2.Platform$IOS$MainThreadExecutor
# Platform used when running on Java 8 VMs. Will not be used at runtime.
-dontwarn retrofit2.Platform$Java8
# Retain generic type information for use by reflection by converters and adapters.
-keepattributes Signature
# Retain declared checked exceptions for use by a Proxy instance.
-keepattributes Exceptions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实不完全，retrofit是对Okhttp的封装，而且里面还使用了Gson转换。&lt;/p&gt;

&lt;p&gt;所以需要一个完整的封装。如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Retrofit
-dontnote retrofit2.Platform
-dontnote retrofit2.Platform$IOS$MainThreadExecutor
-dontwarn retrofit2.Platform$Java8
-keepattributes Signature
-keepattributes Exceptions

# okhttp
-dontwarn okio.**

# Gson
-keep class com.example.testing.retrofitdemo.bean.**{*;} # 自定义数据模型的bean目录

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;volley&#34;&gt;volley&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;## -------------------------------------------
##     volley混淆
## -------------------------------------------
-keep class com.android.volley.** {*;}
-keep class com.android.volley.toolbox.** {*;}
-keep class com.android.volley.Response$* { *; }
-keep class com.android.volley.Request$* { *; }
-keep class com.android.volley.RequestQueue$* { *; }
-keep class com.android.volley.toolbox.HurlStack$* { *; }
-keep class com.android.volley.toolbox.ImageLoader$* { *; }

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;eventbus&#34;&gt;EventBus&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;## ----------------------------------
##     EventBus 相关的混淆配置
## ----------------------------------
-keepattributes *Annotation*
-keepclassmembers class ** {
    @org.greenrobot.eventbus.Subscribe &amp;lt;methods&amp;gt;;
}
-keep enum org.greenrobot.eventbus.ThreadMode { *; }
# Only required if you use AsyncExecutor
-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {
    &amp;lt;init&amp;gt;(java.lang.Throwable);
}
-keepclassmembers class ** {
    public void onEvent*(**);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;butterknife&#34;&gt;ButterKnife&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;## ----------------------------------
##     butterknife 相关的混淆配置
## ----------------------------------
-dontwarn butterknife.internal.**
-keep class **$$ViewInjector { *; }
-keepnames class * { @butterknife.InjectView *;}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;混淆代码调试&#34;&gt;混淆代码调试&lt;/h2&gt;

&lt;p&gt;混淆后的代码出现错误怎么办呢，如何进行调试？了解一下ProGuard文件。&lt;/p&gt;

&lt;p&gt;混淆之后，会给我们输出一些文件，在gradle方式下是在&lt;project_dir&gt;/build/proguard/目录下，ant是在&lt;project_dir&gt;/bin/proguard目录，eclipse构建在&lt;project_dir&gt;/proguard目录像。
分别有以下文件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dump.txt 描述apk文件中所有类文件间的内部结构。&lt;/li&gt;
&lt;li&gt;mapping.txt 列出了原始的类，方法，和字段名与混淆后代码之间的映射。&lt;/li&gt;
&lt;li&gt;seeds.txt 列出了未被混淆的类和成员&lt;/li&gt;
&lt;li&gt;usage.txt 列出了从apk中删除的代码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我们发布的release版本的程序出现bug时，可以通过以上文件（特别时mapping.txt）文件找到错误原始的位置，进行bug修改。同时，可能一开始的proguard配置有错误，也可以通过错误日志，根据这些文件，找到哪些文件不应该混淆，从而修改proguard的配置。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
