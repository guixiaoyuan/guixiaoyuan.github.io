<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>总结 on 桂圆的第二人生 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://guixiaoyuan.github.io/tags/%E6%80%BB%E7%BB%93/</link>
    <language>en-us</language>
    <author>Xiaoyuan Gui</author>
    <copyright>Copyright (c) 2017, Xiaoyuan Gui; all rights reserved.</copyright>
    <updated>Thu, 23 Aug 2018 00:30:03 CST</updated>
    
    <item>
      <title>2018元贝驾考工作经验</title>
      <link>https://guixiaoyuan.github.io/post/2018-08-23/</link>
      <pubDate>Thu, 23 Aug 2018 00:30:03 CST</pubDate>
      <author>Xiaoyuan Gui</author>
      <guid>https://guixiaoyuan.github.io/post/2018-08-23/</guid>
      <description>&lt;p&gt;我在 2018年 8 月份离职了，这份工作实际干了不超过4个月，主要是团队项目管理原因，每天干活干的特别憋屈，功劳是别人的，锅都是自己的。当初进入这家公司也是够蠢的，只注重短期利益，忽略长远发展，简单概括就是短视。这家公司是一个有20人不到的团队。具体的细节不阐述了。说说得到的经验教训。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;相对于稳定的体制之内的工作，到处漂泊的程序员就是无业啊尼玛！&lt;/p&gt;

&lt;p&gt;可是编程是门手艺活儿，既然选择了，那就做下去吧。&lt;/p&gt;

&lt;p&gt;经过这样的一段经历之后，以后找公司一定要有排除选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;看公司规模，低于 100 人的排除&lt;/li&gt;
&lt;li&gt;看公司类型，互联网公司优先，拒绝外包&lt;/li&gt;
&lt;li&gt;看公司成立时间，少于两年的排除&lt;/li&gt;
&lt;li&gt;看公司的产品是否可行，是否盈利（是否游走在法律的边缘，比如p2p，文娱）&lt;/li&gt;
&lt;li&gt;看公司的技术团队和管理层，是否名校或名企出身&lt;/li&gt;
&lt;li&gt;看公司的文化氛围，互联网文化好的优先考虑&lt;/li&gt;
&lt;li&gt;看公司在招的其他岗位，对组织架构有个大概了解&lt;/li&gt;
&lt;li&gt;同事是怎么样的&lt;/li&gt;
&lt;li&gt;老板是怎么样的&lt;/li&gt;
&lt;li&gt;工作空间的舒适程度&lt;/li&gt;
&lt;li&gt;报酬&lt;/li&gt;
&lt;li&gt;每天实际上在做的事情&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;v站上对换工作的态度，我觉得有道理。贴出来共勉。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;换工作是一件经过深思熟虑的严肃事情&lt;/li&gt;
&lt;li&gt;频繁换工作是 loser 做的事情&lt;/li&gt;
&lt;li&gt;公司应该提供给员工尽可能好的条件&lt;/li&gt;
&lt;li&gt;如果你自己从来没有从期权上赚过钱，就不要在招聘时强调期权&lt;/li&gt;
&lt;li&gt;招聘时请尽量给出薪酬范围&lt;/li&gt;
&lt;li&gt;求职时请附上自己的薪酬要求&lt;/li&gt;
&lt;li&gt;说话前经过足够的思考是好习惯&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>关于String的一点知识</title>
      <link>https://guixiaoyuan.github.io/post/2017-09-21/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 UTC</pubDate>
      <author>Xiaoyuan Gui</author>
      <guid>https://guixiaoyuan.github.io/post/2017-09-21/</guid>
      <description>&lt;p&gt;相信大部分准备过java面试的同学都知道Java中的String是final修饰,不可变的。可是只知道是什么，不知道为什么是一件非常危险的事情。因为任何事情都没有绝对。&lt;/p&gt;

&lt;p&gt;我们先看看什么是不可变对象。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;什么是不可变对象&#34;&gt;什么是不可变对象？&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;如果一个对象，在创建完成之后，不能在改变他的状态。（包括内部成员变量，基本数据类型。引用类型的变量不能指向其他对象，引用类型指向的对象的状态）对象则认为不可改变。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于Java中的String不可变的原因，具体可以参考下面这篇文章。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/zhangjg_blog/article/details/18319521&#34;&gt;Java中的String不可变的原因&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文中源码一直分析到了1.7，但是1.8之后，String源码又改动。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public final class String
    implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence {

    // The associated character storage is managed by the runtime. We only
    // keep track of the length here.
    //
    // private final char value[];
    private final int count;

    /** Cache the hash code for the string */
    private int hash; // Default to 0
    ....
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释中我们可以看到，已经把字符存储放到runtime里面去了。而且内部修改字符串，也不再是简单的new String出来。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public String replace(char oldChar, char newChar) {
    String replaced = this;
    if (oldChar != newChar) {
        for (int i = 0; i &amp;lt; count; ++i) {
            if (charAt(i) == oldChar) {
                if (replaced == this) {
                    replaced = StringFactory.newStringFromString(this);
                }
                replaced.setCharAt(i, newChar);
            }
        }
    }
    return replaced;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;采用了StringFactory.newStringFromString(),这个是native方法。上述文章中提到了利用反射修改不可访问的value，从而使不可变String，变成可变String。貌似在1.8中已经被封杀了。&lt;/p&gt;

&lt;h3 id=&#34;string类不可变的好处&#34;&gt;String类不可变的好处：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;字符串池实现的前提。在运行时节约heap空间。不同字符串变量都指向同一个字符串。&lt;/li&gt;
&lt;li&gt;保障安全。直接影响：账号，密码等都以字符串的形式传递；隐形影响：HashSet，存储String内容，如果可变，破坏键值的唯一性。&lt;/li&gt;
&lt;li&gt;多线程安全。&lt;/li&gt;
&lt;li&gt;缓存Hashcode，高效。String不可变，hashcode就是一个定值。不需要重新计算，所以作为map中的键，处理速度会更快。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Android 如何根据XML文件读取drawable资源</title>
      <link>https://guixiaoyuan.github.io/post/2016-01-06/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 UTC</pubDate>
      <author>Xiaoyuan Gui</author>
      <guid>https://guixiaoyuan.github.io/post/2016-01-06/</guid>
      <description>&lt;p&gt;问题提出的背景：自己在做launcher的新功能，摇一摇切换壁纸的时候。需要动态获取壁纸的id，然后填充到布局上。这样在后期维护的时候，就不需要过多的改动代码，直接增减图片，以及在配置文件（wallpapers.xml）中修改就好了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一种做法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在XML文件中声明资源ID数组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;array name = &amp;quot;drawer_icon_normal&amp;quot;&amp;gt;
        &amp;lt;item&amp;gt;@drawable/ic_drawer_home_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;@drawable/ic_drawer_follow_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;@drawable/ic_drawer_collect_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;@drawable/ic_drawer_register_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;@drawable/ic_drawer_explore_normal&amp;lt;/item&amp;gt;
    &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后要获取ID需要通过TypedArray来获取。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TypedArray array = context.getResources().obtainTypedArray(R.array.drawer_icon_normal);
    for (int i = 0; i &amp;lt; array.length(); i++) {
        drawables_normal[i] = array.getResourceId(i$, R.drawable.default_profile);//后面的drawable文件是找不到资源加载的的文件
    }
    array.recycle();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;第二种做法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;xml文件中声明有所不同。没有了@drawable，所以在获取图片名字的时候，直接是名字，而不是路径。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;array name = &amp;quot;drawer_icon_normal&amp;quot;&amp;gt;
        &amp;lt;item&amp;gt;ic_drawer_home_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;ic_drawer_follow_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;ic_drawer_collect_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;ic_drawer_register_normal&amp;lt;/item&amp;gt;
        &amp;lt;item&amp;gt;ic_drawer_explore_normal&amp;lt;/item&amp;gt;
    &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后获取Id的方法如下：&lt;/p&gt;

&lt;p&gt;获取图片的文件名的方法：&lt;/p&gt;

&lt;p&gt;String[] extras = getContext.getResources().getStringArray(R.array.drawer_icon_normal);&lt;/p&gt;

&lt;p&gt;packageName的获取方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getContext.getResources().getResourcesPackageName(R.array.drawer_icon_normal);
int resId =  getContext().getResources().getIdentifier(&amp;quot;图片的文件名&amp;quot;，&amp;quot;文件的类型，如drawable&amp;quot;，&amp;quot;文件的packageName  一般为getContext.getPackageName()&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ViewHolder 小结</title>
      <link>https://guixiaoyuan.github.io/post/2015-12-23/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 UTC</pubDate>
      <author>Xiaoyuan Gui</author>
      <guid>https://guixiaoyuan.github.io/post/2015-12-23/</guid>
      <description>&lt;p&gt;adapter用的很多，android 5.0之后，采用recycleview来取代之前的listview。其中最大的一点就是让大家习惯于用viewholder.自己小结一下viewHolder的好处。&lt;/p&gt;

&lt;p&gt;根据android对view的绘制原理，我们可以看到每一次对画布中view的寻找，是自上而下的，所以每一次findviewbyId的消耗非常大。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;所以根据为了减少不必要的资源浪费，我们直接将找到的id资源，暂存起来。也就是放进ViewHolder中。&lt;/p&gt;

&lt;p&gt;viewHolder不是一个缓存类，只是一个静态类。&lt;/p&gt;

&lt;h3 id=&#34;2-convertview中的tag&#34;&gt;2.convertView中的TAG：&lt;/h3&gt;

&lt;p&gt;(1).Tag不像ID是用标示view的。Tag从本质上来讲是就是相关联的view的额外的信息。它们经常用来存储一些view的数据，这样做非常方便而不用存入另外的单独结构。&lt;/p&gt;

&lt;p&gt;(2). 首先我们要知道setTag方法是干什么的：他是给View对象的一个标签。&lt;/p&gt;

&lt;p&gt;*标签可以是任何内容，我们这里把他设置成了一个对象*，&lt;/p&gt;

&lt;p&gt;因为我们是把vlist2.xml的元素抽象出来成为一个类ViewHolder，用了setTag，这个标签就是ViewHolder实例化后对象的一个属性。我们之后对于ViewHolder实例化的对象holder的操作，都会因为java的引用机制而一直存活并改变convertView的内容，而不是每次都是去new一个。我们就这样达到的重用。&lt;/p&gt;

&lt;p&gt;Tag的作用就是设置标签，标签可以是任意玩意。
以及convertView是如何在程序中使代码运行变的效率的：利用缓存convertView尽可能少实例化同样结构体的对象；&lt;/p&gt;

&lt;p&gt;自己在写demo的时候，本来是想看滑动listview，item的加载情况。没想到，意外的发现了getView的重复调用的情况。&lt;/p&gt;

&lt;p&gt;在布局中将listview里高度设置成wrap_parent。计算父控件的高度所以造成了一种反复调用情况，从而次数不确定。&lt;/p&gt;

&lt;p&gt;当我们固定listview的高度时（fill_parent或直接固定高度），那么listview很容易就能计算出容器内可以显示多少行。但如果我们使用了“wrap_content”，只有在屏幕内控件完全加载后才知道到底能显示多少行数据时，ListView自身便会做一些尝试性计算。在源码中可以发现一些叫做onMeasure的方法，目测是做此用处(源码略显复杂，没读透)。
当listview计算出屏幕一共需要多少行后，如果listview自身高度不变，那么它的容纳的行数就不会变，使用getChildCount()可以得到它的最大行数。&lt;/p&gt;

&lt;p&gt;更深层次的解释为:
View在Draw的时候分成两个阶段：measure和layout，在measure阶段时主要就是为了计算两个参数：height和width。而且要注意的是，这是个递归的过程，从顶向下，DecorView开始依次调用自己子元素的measure。计算完成这两个参数后就开始layout，最后再是draw的调用。
对于ListView，当然每一个Item都会被调用measure方法，而在这个过程中getView和getCount会被调用，而且看用户的需求，可能会有很多次调用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
